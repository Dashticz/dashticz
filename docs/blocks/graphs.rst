.. _dom_graphs:

Graphs
======

If your Domoticz device contains a value (temperature, humidity, power, etc.)
then when you click on the block a popup window will appear showing a graph of the values of the device.

To change the default size of the graph popup windows add the following style blocks to your custom.css::

    .graphheight {
      height: 400px;
    }
    
    .graphwidth {
      width: 400px;
    }

To remove the close button of the graph popup add the following text to custom.css::

    .graphclose { display: none; }

Besides popup graphs it's also possible to show the graph directly on the dashboard itself,
by adding the graph-id to a column definition as follows::

    //Adding a graph of device 691 to column 2
    columns[2]['blocks'] = [
      ...,
      'graph_691',      //691 is the device id for which you want to show the graph
      ...
    ]

.. note:: Using both a graph-block as well as a popup graph of the same device is not supported

The following block parameters can be used to configure the graph:

  * - graph
    - | Sets the graph type
      | ``'line'`` Line graph (default)
      | ``'bar'`` Bar graph
  * - graphTypes
    - | Array of values you want to show in the graph. Can be used for Domoticz devices having several values.
      | ``['te']``: Temperature
      | ``['hu']``: Humidity
      | ``['ba']``: Barometer
      | ``['gu', 'sp']``: wind guts and speed
      | ``['uvi']``, ``['lux']``, ``['lux_avg']``, ``['mm']``, ``['v_max']``
      | ``['v2']``, ``['mm']``, ``['eu']``, ``['u']``, ``['u_max']``,``['co2']``
  * - custom
    - Customized graph. See below for examples

With the ``graph`` parameter you can define the graph type (``line`` for a line graph and ``bar`` for a bar graph)

In case of multi-value devices, like temp-hum-bar, you can select the data to show in the graph via the ``graphTypes`` parameter.

We will show the possibilities by showing a:

* Simple energy device (Solar panel)
* Climate device (temperature, humidity, barometer)
* P1 Smart Meter

Simple energy device
~~~~~~~~~~~~~~~~~~~~

The solar panel device has device id 6. First we add it to a column without any additional configuration parameters,
to show the default result::

  columns[2]['blocks'] = [
    6
  ]


.. image :: img/solar_default.jpg

As you see three buttons are generated (actual power, energy today, total energy).
I only want to have one button, so I change my column definition to::

  columns[2]['blocks'] = [
    '6_1'
  ]

By pressing the button the following graphs pops up:

.. image :: img/solar_1_default.jpg

So, nothing special. Only the red line color is maybe a bit too much. Let's change it into a yellow bar graph.
We have to add a block definition::

    blocks['graph_6'] = {
        type: 'bar',
        datasetColors: ['yellow']
    }

.. image :: img/solar_yellow_bar.jpg

Now I want to add a legend at the bottom::

    blocks['graph_6'] = {
        type: 'bar',
        datasetColors: ['yellow'],
        legend: true
    }

.. image :: img/solar_legend.jpg

As you can see the data points are labeled as 'V'. This name is generated by Domoticz. We can translate the Domoticz name in something else, by extending the legend parameter ::

    blocks['graph_6'] = {
        type: 'bar',
        datasetColors: ['yellow'],
        legend: {
          'v': 'Power generation'
        }
    }

``legend`` is an object consisting of key-value pairs for the translation from Domoticz names to custom names.

After pressing the 'Month' button on the popup graph:

.. image :: img/solar_custom_legend.jpg



Examples::

    // To show the temperature values of device 658
    // in a popup graph
    blocks[658] = {
      graphTypes: ['te']
    }
    
    // To show the barometer values of device 659
    // on the dashboard directly
    blocks['graph_659'] = {
      graphTypes: ['ba']
    }

You can combine the values in one graph. Example::

   graphTypes: ['te', 'hu']

The title and width parameters are applicable to graph-blocks as well.

So now you can do::
   
   //To show a graph of device id 12
   //on the Dashboard
   //with a custom title and a 50% column width
   blocks['graph_12'] = {
      title: 'Custom graph title',
      width: 6,
      graphTypes: ['te', 'hu']
   };

With the parameter ``graphProperties`` you can provide an object to define the visual appearance.
Example: Stacked bar graph (of a P1 smart meter with index 43 in this case) ::

    blocks['graph_43'] = {
        title: 'My Power',
        graph: 'bar',
        graphProperties : {
            gridTextColor : '#c3f6fe',
            barColors: ['#f1c40f', '#40e0d0', '#eee'],
            ymax:10  //set to 'auto' for auto scaling
        }
    }

This will give the following result:

.. image :: img/graph_bar.jpg


For all possible graphProperties see:

* https://morrisjs.github.io/morris.js/lines.html (for line graphs)
* https://morrisjs.github.io/morris.js/bars.html (for bar graphs)

  
