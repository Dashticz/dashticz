.. _dom_graphs:

Graphs
======

If your Domoticz device contains a value (temperature, humidity, power, etc.)
then when you click on the block a popup window will appear showing a graph of the values of the device.

To change the default size of the graph popup windows add the following style blocks to your custom.css::

    .graphheight {
      height: 400px;
    }
    
    .graphwidth {
      width: 400px;
    }

To remove the close button of the graph popup add the following text to custom.css::

    .graphclose { display: none; }

Besides popup graphs it's also possible to show the graph directly on the dashboard itself,
by adding the graph-id to a column definition as follows::

    //Adding a graph of device 691 to column 2
    columns[2]['blocks'] = [
      ...,
      'graph_691',      //691 is the device id for which you want to show the graph
      ...
    ]

The following block parameters can be used to configure the graph:

  * - graph
    - | Sets the graph type
      | ``'line'`` Line graph (default)
      | ``'bar'`` Bar graph
  * - graphTypes
    - | Array of values you want to show in the graph. Can be used for Domoticz devices having several values.
      | ``['te']``: Temperature
      | ``['hu']``: Humidity
      | ``['ba']``: Barometer
      | ``['gu', 'sp']``: wind guts and speed
      | ``['uvi']``, ``['lux']``, ``['lux_avg']``, ``['mm']``, ``['v_max']``
      | ``['v2']``, ``['mm']``, ``['eu']``, ``['u']``, ``['u_max']``,``['co2']``
  * - custom
    - Customized graph. See below for examples

We will show the possibilities by showing a:

* Simple energy device (Solar panel)
* Climate device (temperature, humidity, barometer)
* P1 Smart Meter

Simple energy device
--------------------

The solar panel device has device id 6. First we add it to a column without any additional configuration parameters,
to show the default result::

  columns[2]['blocks'] = [
    6
  ]


.. image :: img/solar_default.jpg

As you see three buttons are generated (actual power, energy today, total energy).
I only want to have one button, so I change my column definition to::

  columns[2]['blocks'] = [
    '6_1'
  ]

By pressing the button the following graphs pops up:

.. image :: img/solar_1_default.jpg

So, nothing special. Only the red line color is maybe a bit too much. Let's change it into a yellow bar graph.
We have to add a block definition::

    blocks['graph_6'] = {
        type: 'bar',
        datasetColors: ['yellow']
    }

.. image :: img/solar_yellow_bar.jpg

Now I want to add a legend at the bottom::

    blocks['graph_6'] = {
        type: 'bar',
        datasetColors: ['yellow'],
        legend: true
    }

.. image :: img/solar_legend.jpg

As you can see the data points are labeled as 'V'. This name is generated by Domoticz. We can translate the Domoticz name in something else, by extending the legend parameter ::

    blocks['graph_6'] = {
        type: 'bar',
        datasetColors: ['yellow'],
        legend: {
          'v': 'Power generation'
        }
    }

``legend`` is an object consisting of key-value pairs for the translation from Domoticz names to custom names.

After pressing the 'Month' button on the popup graph:

.. image :: img/solar_custom_legend.jpg

Climate device
--------------
First let's add a climate device with Domoticz ID 659 to a column::

    columns[3]['blocks'] = [
        'graph_659'
    ]

This will show the graph directly on the Dashticz dashboard:

.. image :: img/climate.jpg

As you can see the climate device has three subdevices (temperature, humidity, pressure).
Since these are different properties three Y axes are being created.

If you prefer to only see the temperature and humidity add a block definition::

    blocks['graph_659'] = {
        graphTypes : ['te', 'hu'],
        legend: true
    }


.. image :: img/climate_te_hu.jpg

Of course you can add a legend as well. See the previous section for an example.

P1 smart meter
--------------

First let's show the default P1 smart meter graph:

.. image :: img/p1.jpg

You see a lot of lines. What do they mean? Let's add a legend ::

    blocks['graph_43'] = {
        legend: true
    }

This gives:

.. image :: img/p1_legend.jpg

That doesn't tell too much. However, this are the value names as provided by Domoticz.
Now you have to know that a P1 power meter has 4 values:

  * Power usage tariff 1
  * Power usage tariff 2
  * Power delivery tariff 1
  * Power delivery tariff 2

The first two represent the energy that flows into your house. The last two represent the energy that your house delivers back to the grid.

So we can add a more meaningful legend as follows::

    blocks['graph_43'] = {
        legend: {
          v: "Usage 1",
          v2: "Usage 2",
          r1: "Return 1",
          r2: "Return 2"
    }

Resulting in:

.. image :: img/p1_legend_2.jpg

However what I would like to see is:
* The sum of Usage 1 and Usage 2
* The sum of Return 1 and Return 2, but than negative
* A line to show the nett energy usage: Usage 1 + Usage 2 - Return 1 - Return
* The usage and return data should be presented as bars. The nett energy as a line.

Can we do that? Yes, with custom graphs!

Custom graphs
-------------

I use the P1 smart meter as an example again to demonstrate how to create custom graphs. First the code and result.
The explanation will follow after that::



Examples::

    // To show the temperature values of device 658
    // in a popup graph
    blocks[658] = {
      graphTypes: ['te']
    }
    
    // To show the barometer values of device 659
    // on the dashboard directly
    blocks['graph_659'] = {
      graphTypes: ['ba']
    }

You can combine the values in one graph. Example::

   graphTypes: ['te', 'hu']

The title and width parameters are applicable to graph-blocks as well.

So now you can do::
   
   //To show a graph of device id 12
   //on the Dashboard
   //with a custom title and a 50% column width
   blocks['graph_12'] = {
      title: 'Custom graph title',
      width: 6,
      graphTypes: ['te', 'hu']
   };

With the parameter ``graphProperties`` you can provide an object to define the visual appearance.
Example: Stacked bar graph (of a P1 smart meter with index 43 in this case) ::

    blocks['graph_43'] = {
        title: 'My Power',
        graph: 'bar',
        graphProperties : {
            gridTextColor : '#c3f6fe',
            barColors: ['#f1c40f', '#40e0d0', '#eee'],
            ymax:10  //set to 'auto' for auto scaling
        }
    }

This will give the following result:

.. image :: img/graph_bar.jpg


For all possible graphProperties see:

* https://morrisjs.github.io/morris.js/lines.html (for line graphs)
* https://morrisjs.github.io/morris.js/bars.html (for bar graphs)

  
